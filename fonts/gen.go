//go:build ignore
// +build ignore

package main

// Erstellt die Datei fontnames.go. Diese enth채lt f체r die Go-Fonts, aber
// auch f체r alle Fonts, die als TrueType- oder OpenType-Dateien in ./FontFiles
// abgelegt sind, Variablen f체r eine einfachere Verwendung in
// Graphikprogrammen.
//
// Dieses Programm muss manuell mit "go run gen.go" gestartet werden!
// Dies ist allerdings nur dann notwendig, wenn es Anpassungen im Verzeichnis
// FontFiles gibt - was wohl eher selten passiert.

import (
    // "bytes"
    "fmt"
    // "go/format"
    // "io/ioutil"
    "log"
    "os"
    "path/filepath"
    "strings"
)

const (
    fontDir  = "FontFiles"
    fontPattern  = "[0-9][0-9]-*.[ot]tf"
    fontFile = "fontnames.go"
)

var (
    goFontList = []string{
        "GoRegular",
        "GoItalic",
        "GoMedium",
        "GoMediumItalic",
        "GoBold",
        "GoBoldItalic",
        "GoMono",
        "GoMonoItalic",
        "GoMonoBold",
        "GoMonoBoldItalic",
        "GoSmallcaps",
        "GoSmallcapsItalic",
    }
    ttfFontList []string = make([]string, 0)
)

func main() {
    fileList, err := filepath.Glob(filepath.Join(fontDir, fontPattern))
    check(err)

    fh, err := os.OpenFile(fontFile, os.O_RDWR | os.O_CREATE | os.O_TRUNC, 0644)
    check(err)
    defer fh.Close()

    fmt.Fprintf(fh, "package fonts\n\n")

    fmt.Fprintf(fh, `// WICHTIG: Diese Datei sollte nicht manuell angepasst werden!
// Sie wird automatisch per Script neu erzeugt. Allfaellige manuelle
// Anpassungen werden damit ueberschrieben.`)

    fmt.Fprintf(fh, "\n\nimport (\n")
    fmt.Fprintf(fh, "    \"embed\"\n")
    // fmt.Fprintf(fh, "    \"golang.org/x/image/font/opentype\"\n")
    for _, goFont := range goFontList {
        pkgName := strings.ToLower(goFont)
        fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/%s\"\n", pkgName)
    }
    fmt.Fprintf(fh, ")\n\n")

    fmt.Fprintf(fh, "//go:embed FontFiles/*.ttf FontFiles/*.otf\n")
    fmt.Fprintf(fh, "var fontFiles embed.FS\n\n")

    fmt.Fprintf(fh, "var (\n")
    for _, pathName := range fileList {
        baseName := filepath.Base(pathName)
        fontName := baseName[3:len(baseName)-len(filepath.Ext(baseName))]
        fontName  = strings.Replace(fontName, "-", "", -1)
        varName  := strings.ToLower(fontName)
        ttfFontList = append(ttfFontList, fontName)
        fmt.Fprintf(fh, "    %s, _ = fontFiles.ReadFile(\"%s\")\n", varName, pathName)
    }
    fmt.Fprintf(fh, ")\n\n")

    fmt.Fprintf(fh, "var (\n")
    for _, name := range goFontList {
        varName  := strings.ToLower(name)
        fmt.Fprintf(fh, "    %-35s = Parse(%s.TTF)\n", fmt.Sprintf("%s", name), varName)
        // fmt.Fprintf(fh, "    %-35s = opentype.Parse(%s.TTF)\n", fmt.Sprintf("%s, _", name), varName)
    }
    for _, name := range ttfFontList {
        varName  := strings.ToLower(name)
        fmt.Fprintf(fh, "    %-35s = Parse(%s)\n", fmt.Sprintf("%s", name), varName)
        // fmt.Fprintf(fh, "    %-35s = opentype.Parse(%s)\n", fmt.Sprintf("%s, _", name), varName)
    }
    fmt.Fprintf(fh, ")\n\n")

    fmt.Fprintf(fh, "var Map = map[string]*Font{\n")
    // fmt.Fprintf(fh, "var Map = map[string]*opentype.Font{\n")
    for _, name := range goFontList {
        fmt.Fprintf(fh, "    %-35s %s,\n", fmt.Sprintf("\"%s\":", name), name)
    }
    for _, name := range ttfFontList {
        fmt.Fprintf(fh, "    %-35s %s,\n", fmt.Sprintf("\"%s\":", name), name)
    }
    fmt.Fprintf(fh, "}\n\n")

    fmt.Fprintf(fh, "var Names = []string{\n")
    for _, name := range goFontList {
        fmt.Fprintf(fh, "    \"%s\",\n", name)
    }
    for _, name := range ttfFontList {
        fmt.Fprintf(fh, "    \"%s\",\n", name)
    }
    fmt.Fprintf(fh, "}\n\n")
}

// func do(ttfName string) {
//     fontName := fontName(ttfName)
//     pkgName := pkgName(ttfName)
//     if err := os.Mkdir(pkgName, 0777); err != nil && !os.IsExist(err) {
//         log.Fatal(err)
//     }
//     src, err := ioutil.ReadFile(filepath.Join(fontDir, ttfName))
//     if err != nil {
//         log.Fatal(err)
//     }

//     desc := "a proportional-width, sans-serif"
//     if strings.Contains(ttfName, "Mono") {
//         desc = "a fixed-width, slab-serif"
//     }

//     b := new(bytes.Buffer)
//     fmt.Fprintf(b, "// generated by go run gen.go; DO NOT EDIT\n\n")
//     fmt.Fprintf(b, "// Package %s provides the %q TrueType font\n", pkgName, fontName)
//     fmt.Fprintf(b, "// from the Go font family. It is %s font.\n", desc)
//     fmt.Fprintf(b, "//\n")
//     fmt.Fprintf(b, "// See https://blog.golang.org/go-fonts for details.\n")
//     fmt.Fprintf(b, "package %s\n\n", pkgName)
//     fmt.Fprintf(b, "// TTF is the data for the %q TrueType font.\n", fontName)
//     fmt.Fprintf(b, "var TTF = []byte{")
//     for i, x := range src {
//         if i&15 == 0 {
//             b.WriteByte('\n')
//         }
//         fmt.Fprintf(b, "%#02x,", x)
//     }
//     fmt.Fprintf(b, "\n}\n")

//     dst, err := format.Source(b.Bytes())
//     if err != nil {
//         log.Fatal(err)
//     }
//     if err := ioutil.WriteFile(filepath.Join(pkgName, "data.go"), dst, 0666); err != nil {
//         log.Fatal(err)
//     }
// }

// // fontName maps "Go-Regular.ttf" to "Go Regular".
// func fontName(ttfName string) string {
//     extLen := len(filepath.Ext(ttfName))
//     s := ttfName[:len(ttfName)-extLen]
//     s = strings.Replace(s, "-", " ", -1)
//     return s
// }

// // pkgName maps "Go-Regular.ttf" to "goregular".
// func pkgName(ttfName string) string {
//     extLen := len(filepath.Ext(ttfName))
//     s := ttfName[:len(ttfName)-extLen]
//     s = strings.Replace(s, "-", "", -1)
//     s = strings.ToLower(s)
//     return s
// }

func check(err error) {
    if err != nil {
        log.Fatalf("%v", err)
    }
}

