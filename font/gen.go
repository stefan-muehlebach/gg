// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build ignore
// +build ignore

package main

// This program generates the subdirectories of Go packages that contain []byte
// versions of the TrueType font files under ./ttfs.
//
// Currently, "go run gen.go" needs to be run manually. This isn't done by the
// usual "go generate" mechanism as there isn't any other Go code in this
// directory (excluding sub-directories) to attach a "go:generate" line to.
//
// In any case, code generation should only need to happen when the underlying
// TTF files change, which isn't expected to happen frequently.

import (
    "bytes"
    "fmt"
    "go/format"
    "io/ioutil"
    "log"
    "os"
    "path/filepath"
    "strings"
)

const (
    fontDir  = "FontFiles"
    fontExt  = "*.[ot]tf"
    fontFile = "fontnames.go"
)

var (
    goFontList = [...]string{
        "GoRegular",
        "GoItalic",
        "GoMedium",
        "GoMediumItalic",
        "GoBold",
        "GoBoldItalic",
        "GoMono",
        "GoMonoItalic",
        "GoMonoBold",
        "GoMonoBoldItalic",
        "GoSmallcaps",
        "GoSmallcapsItalic",
    }
    ttfFontList []string = make([]string, 0)
)

func main() {
    fileList, err := filepath.Glob(filepath.Join(fontDir, fontExt))
    check(err)

    fh, err := os.OpenFile(fontFile, os.O_RDWR | os.O_CREATE | os.O_TRUNC, 0644)
    check(err)
    defer fh.Close()
    
    fmt.Fprintf(fh, "package font\n\n")

    fmt.Fprintf(fh, "import (\n")
    fmt.Fprintf(fh, "    \"embed\"\n")
    //fmt.Fprintf(fh, "    \"io/ioutil\"\n")
    //fmt.Fprintf(fh, "    \"path/filepath\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/opentype\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gobold\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gobolditalic\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/goitalic\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gomedium\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gomediumitalic\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gomono\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gomonobold\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gomonobolditalic\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gomonoitalic\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/goregular\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gosmallcaps\"\n")
    fmt.Fprintf(fh, "    \"golang.org/x/image/font/gofont/gosmallcapsitalic\"\n")
    fmt.Fprintf(fh, ")\n\n")

    fmt.Fprintf(fh, "//go:embed FontFiles/*.ttf FontFiles/*.otf\n")
    fmt.Fprintf(fh, "var fontFiles embed.FS\n\n")

    fmt.Fprintf(fh, "var (\n")
    for _, pathName := range fileList {
        baseName := filepath.Base(pathName)
        fontName := baseName[:len(baseName)-len(filepath.Ext(baseName))]
        fontName  = strings.Replace(fontName, "-", "", -1)
        varName  := strings.ToLower(fontName)
        ttfFontList = append(ttfFontList, fontName)
        fmt.Fprintf(fh, "    %s, _ = fontFiles.ReadFile(\"%s\")\n", varName, pathName)
        //fmt.Fprintf(fh, "    %s, _ = ioutil.ReadFile(\n        filepath.Join(pkgBaseDir, \"%s\"))\n", varName, pathName)
    }
    fmt.Fprintf(fh, ")\n\n")

    fmt.Fprintf(fh, "var (\n")
    for _, name := range goFontList {
        varName  := strings.ToLower(name)
        fmt.Fprintf(fh, "    %-35s = opentype.Parse(%s.TTF)\n", fmt.Sprintf("%s, _", name), varName)
    }
    for _, name := range ttfFontList {
        varName  := strings.ToLower(name)
        fmt.Fprintf(fh, "    %-35s = opentype.Parse(%s)\n", fmt.Sprintf("%s, _", name), varName)
    }
    fmt.Fprintf(fh, ")\n\n")

    fmt.Fprintf(fh, "var Map = map[string]*opentype.Font{\n")
    for _, name := range goFontList {
        fmt.Fprintf(fh, "    %-35s %s,\n", fmt.Sprintf("\"%s\":", name), name)
    }
    for _, name := range ttfFontList {
        fmt.Fprintf(fh, "    %-35s %s,\n", fmt.Sprintf("\"%s\":", name), name)
    }
    fmt.Fprintf(fh, "}\n\n")

    fmt.Fprintf(fh, "var Names = []string{\n")
    for _, name := range goFontList {
        fmt.Fprintf(fh, "    \"%s\",\n", name)
    }
    for _, name := range ttfFontList {
        fmt.Fprintf(fh, "    \"%s\",\n", name)
    }
    fmt.Fprintf(fh, "}\n\n")
}

func do(ttfName string) {
    fontName := fontName(ttfName)
    pkgName := pkgName(ttfName)
    if err := os.Mkdir(pkgName, 0777); err != nil && !os.IsExist(err) {
        log.Fatal(err)
    }
    src, err := ioutil.ReadFile(filepath.Join(fontDir, ttfName))
    if err != nil {
        log.Fatal(err)
    }

    desc := "a proportional-width, sans-serif"
    if strings.Contains(ttfName, "Mono") {
        desc = "a fixed-width, slab-serif"
    }

    b := new(bytes.Buffer)
    fmt.Fprintf(b, "// generated by go run gen.go; DO NOT EDIT\n\n")
    fmt.Fprintf(b, "// Package %s provides the %q TrueType font\n", pkgName, fontName)
    fmt.Fprintf(b, "// from the Go font family. It is %s font.\n", desc)
    fmt.Fprintf(b, "//\n")
    fmt.Fprintf(b, "// See https://blog.golang.org/go-fonts for details.\n")
    fmt.Fprintf(b, "package %s\n\n", pkgName)
    fmt.Fprintf(b, "// TTF is the data for the %q TrueType font.\n", fontName)
    fmt.Fprintf(b, "var TTF = []byte{")
    for i, x := range src {
        if i&15 == 0 {
            b.WriteByte('\n')
        }
        fmt.Fprintf(b, "%#02x,", x)
    }
    fmt.Fprintf(b, "\n}\n")

    dst, err := format.Source(b.Bytes())
    if err != nil {
        log.Fatal(err)
    }
    if err := ioutil.WriteFile(filepath.Join(pkgName, "data.go"), dst, 0666); err != nil {
        log.Fatal(err)
    }
}

// fontName maps "Go-Regular.ttf" to "Go Regular".
func fontName(ttfName string) string {
    extLen := len(filepath.Ext(ttfName))
    s := ttfName[:len(ttfName)-extLen]
    s = strings.Replace(s, "-", " ", -1)
    return s
}

// pkgName maps "Go-Regular.ttf" to "goregular".
func pkgName(ttfName string) string {
    extLen := len(filepath.Ext(ttfName))
    s := ttfName[:len(ttfName)-extLen]
    s = strings.Replace(s, "-", "", -1)
    s = strings.ToLower(s)
    return s
}

func check(err error) {
    if err != nil {
        log.Fatalf("%v", err)
    }
}

